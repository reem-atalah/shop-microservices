server.port=8084

#add to discovery-service with this name
spring.application.name=api-gateway

#Equivalent to @EnableEurekaClient in main class
#It helps gateway to register itself in discovery service
spring.cloud.gateway.discovery.locator.enabled=true

# tells api gateway to work in a load balanced mode or not
# don't make load balancing bec, eureka will do it
spring.cloud.loadbalancer.ribbon.enabled=false

#apply lower case to the registration name of microservices in discovery eureka
#If you uncomment this, then write uri in lower case
#spring.cloud.gateway.discovery.locator.lower-case-id=true

#Register all microservices to gateway
spring.cloud.gateway.routes[0].id=product-microservice
#get url from eureka registration link of the microservice
spring.cloud.gateway.routes[0].uri=lb://PRODUCT-MICROSERVICE
#we must say which api it'll go for it, get all apis
#get them from Controller files (productController & categoryController)
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/products/**
#spring.cloud.gateway.routes[0].predicates[1]=Path=/api/categories #this gives error


## no apis in booking so no need for those commands
#spring.cloud.gateway.routes[1].id=booking-microservice
#spring.cloud.gateway.routes[1].uri=lb://BOOKING-MICROSERVICE
#spring.cloud.gateway.routes[1].predicates[0]=Path=/api/booking/**

## Enable token relay: pass the successful authentication token from keycloak to downstream APIs(microservices)
spring.cloud.gateway.default-filters=TokenRelay

## keycloak connection configurations
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/myapp-microservice
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=aTNl3unz1Zf2sy8bcNUPR7ufv4ugzPHt
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8084/login/oauth2/code/spring-cloud-gateway-client



